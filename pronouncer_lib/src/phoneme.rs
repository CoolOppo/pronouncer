#[derive(Serialize, Deserialize, Debug, PartialEq, Eq, Hash, Clone)]
pub enum Phoneme {
    AA,
    AE,
    AH,
    AO,
    AW,
    AY,
    B,
    CH,
    D,
    DH,
    EH,
    ER,
    EY,
    F,
    G,
    HH,
    IH,
    IY,
    JH,
    K,
    L,
    M,
    N,
    NG,
    OW,
    OY,
    P,
    R,
    S,
    SH,
    T,
    TH,
    UH,
    UW,
    V,
    W,
    Y,
    Z,
    ZH,
}

#[allow(dead_code)] // Used by build script
pub fn get_phoneme(string: &str) -> Phoneme {
    match string.to_uppercase().as_str() {
        "AA" => Phoneme::AA,
        "AE" => Phoneme::AE,
        "AH" => Phoneme::AH,
        "AO" => Phoneme::AO,
        "AW" => Phoneme::AW,
        "AY" => Phoneme::AY,
        "B" => Phoneme::B,
        "CH" => Phoneme::CH,
        "D" => Phoneme::D,
        "DH" => Phoneme::DH,
        "EH" => Phoneme::EH,
        "ER" => Phoneme::ER,
        "EY" => Phoneme::EY,
        "F" => Phoneme::F,
        "G" => Phoneme::G,
        "HH" => Phoneme::HH,
        "IH" => Phoneme::IH,
        "IY" => Phoneme::IY,
        "JH" => Phoneme::JH,
        "K" => Phoneme::K,
        "L" => Phoneme::L,
        "M" => Phoneme::M,
        "N" => Phoneme::N,
        "NG" => Phoneme::NG,
        "OW" => Phoneme::OW,
        "OY" => Phoneme::OY,
        "P" => Phoneme::P,
        "R" => Phoneme::R,
        "S" => Phoneme::S,
        "SH" => Phoneme::SH,
        "T" => Phoneme::T,
        "TH" => Phoneme::TH,
        "UH" => Phoneme::UH,
        "UW" => Phoneme::UW,
        "V" => Phoneme::V,
        "W" => Phoneme::W,
        "Y" => Phoneme::Y,
        "Z" => Phoneme::Z,
        "ZH" => Phoneme::ZH,
        &_ => panic!("{}", string),
    }
}
